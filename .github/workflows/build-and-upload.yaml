name: Build and release all software

on:
    release:
        types: [published]

permissions:
    contents: write
    packages: write

jobs:
    build-roverctl:
        #
        # This is a bit of a weird action, since we generate the OpenAPI files in a Docker container (devcontainer)
        # but the actual build is done in the github runner without Docker. This could be optimized a little by
        # creating a makefile target that generates cross-platform builds and then run everything in the Docker container
        #

        name: Build roverctl
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.21.6"

            - name: Set VERSION from tag
              run: echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV

              # Both devcontainer (devuser) and normal user need access
            - name: Fix permissions
              run: sudo chmod -R 777 ./roverctl ./spec

            - name: Generate OpenAPI Go files
              run: |
                  cd roverctl
                  docker build --build-arg HOST_UID=$(id -u) -t roverctl-build-container -f ../.devcontainer/roverctl/Dockerfile .
                  docker run --rm --user devuser  -v "$(pwd):/home/devuser/roverctl" -v "$(pwd)/../spec:/home/devuser/spec"  roverctl-build-container bash -ic 'cd /home/devuser/roverctl && make build-open-api'

            - name: Build binaries for linux and macos (amd64 and arm64)
              env:
                  VERSION: ${{ env.VERSION }}
              working-directory: roverctl/src
              run: |
                  BUILD_DIR=../bin/
                  BINARY_NAME=roverctl
                  LDFLAGS="-X 'github.com/VU-ASE/rover/roverctl/src/views.version=${VERSION}'"
                  mkdir -p $BUILD_DIR

                  # Build for macOS Intel
                  GOOS=darwin GOARCH=amd64 go build -buildvcs=false -ldflags="$LDFLAGS" -o "$BUILD_DIR${BINARY_NAME}-macos-amd64"

                  # Build for macOS Silicon
                  GOOS=darwin GOARCH=arm64 go build -buildvcs=false -ldflags="$LDFLAGS" -o "$BUILD_DIR${BINARY_NAME}-macos-arm64"

                  # Build for Linux AMD64
                  GOOS=linux GOARCH=amd64 go build -buildvcs=false -ldflags="$LDFLAGS" -o "$BUILD_DIR${BINARY_NAME}-linux-amd64"

                  # Build for Linux ARM64
                  GOOS=linux GOARCH=arm64 go build -buildvcs=false -ldflags="$LDFLAGS" -o "$BUILD_DIR${BINARY_NAME}-linux-arm64"

            - name: Save roverctl artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: roverctl-binaries
                  path: roverctl/bin/*

            # - uses: AButler/upload-release-assets@v3.0
            #   with:
            #       files: "roverctl/bin/*"
            #       repo-token: ${{ secrets.GITHUB_TOKEN }}
            #       release-tag: ${{ env.VERSION }}

    build-roverd:
        name: Build roverd
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Build and run in Docker container
              run: |
                  cd roverd
                  docker build --build-arg HOST_UID=$(id -u) -t roverd-build-container -f ../.devcontainer/roverd/Dockerfile ..
                  docker run --rm --user dev -v "$(pwd):/home/dev/work:z" roverd-build-container bash -ic 'make build-arm -C /home/dev/work'

            - name: Set VERSION from tag
              run: echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV

            - name: Save roverd artifact
              uses: actions/upload-artifact@v4
              with:
                  name: roverd-binary
                  path: "${{ github.workspace }}/roverd/target/aarch64-unknown-linux-gnu/release/roverd"

            # - uses: AButler/upload-release-assets@v3.0
            #   with:
            #       files: "${{ github.workspace }}/roverd/target/aarch64-unknown-linux-gnu/release/roverd"
            #       repo-token: ${{ secrets.GITHUB_TOKEN }}
            #       release-tag: ${{ env.VERSION }}

    upload-release-assets:
        name: Upload release assets
        needs:
            - build-roverctl
            - build-roverd
        runs-on: ubuntu-latest
        steps:
            - name: Download roverctl artifacts
              uses: actions/download-artifact@v4
              with:
                  name: roverctl-binaries
                  path: roverctl-bin/

            - name: Extract roverctl artifacts
              run: |
                  ls -al
                  ls -al roverctl-bin
                  mkdir -p roverctl/bin
                  mv roverctl-bin/* roverctl/bin/
                  chmod +x roverctl/bin/*

            - name: Download roverd artifact
              uses: actions/download-artifact@v4
              with:
                  name: roverd-binary
                  path: roverd-bin/

            - name: Extract roverd artifact
              run: |
                  ls -al 
                  ls -al roverd-bin
                  mkdir -p roverd/target/aarch64-unknown-linux-gnu/release/
                  mv roverd-bin/* roverd/target/aarch64-unknown-linux-gnu/release/
                  chmod +x roverd/target/aarch64-unknown-linux-gnu/release/roverd

            - name: Set VERSION from tag
              run: echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV

            # ls all files for debugging
            - name: List all files
              run: |
                  ls -al
                  ls -la roverctl/bin
                  ls -la roverd/target/aarch64-unknown-linux-gnu/release

            - uses: AButler/upload-release-assets@v3.0
              with:
                  files: |
                      roverctl/bin/*
                      roverd/target/aarch64-unknown-linux-gnu/release/roverd
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
                  release-tag: ${{ env.VERSION }}
