/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FqnsGet200ResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FqnsGet200ResponseInner{}

// FqnsGet200ResponseInner struct for FqnsGet200ResponseInner
type FqnsGet200ResponseInner struct {
	Author string `json:"author"`
	Name string `json:"name"`
	Version string `json:"version"`
}

type _FqnsGet200ResponseInner FqnsGet200ResponseInner

// NewFqnsGet200ResponseInner instantiates a new FqnsGet200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFqnsGet200ResponseInner(author string, name string, version string) *FqnsGet200ResponseInner {
	this := FqnsGet200ResponseInner{}
	this.Author = author
	this.Name = name
	this.Version = version
	return &this
}

// NewFqnsGet200ResponseInnerWithDefaults instantiates a new FqnsGet200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFqnsGet200ResponseInnerWithDefaults() *FqnsGet200ResponseInner {
	this := FqnsGet200ResponseInner{}
	return &this
}

// GetAuthor returns the Author field value
func (o *FqnsGet200ResponseInner) GetAuthor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *FqnsGet200ResponseInner) GetAuthorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *FqnsGet200ResponseInner) SetAuthor(v string) {
	o.Author = v
}

// GetName returns the Name field value
func (o *FqnsGet200ResponseInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FqnsGet200ResponseInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FqnsGet200ResponseInner) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *FqnsGet200ResponseInner) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *FqnsGet200ResponseInner) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *FqnsGet200ResponseInner) SetVersion(v string) {
	o.Version = v
}

func (o FqnsGet200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FqnsGet200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["author"] = o.Author
	toSerialize["name"] = o.Name
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *FqnsGet200ResponseInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"author",
		"name",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFqnsGet200ResponseInner := _FqnsGet200ResponseInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFqnsGet200ResponseInner)

	if err != nil {
		return err
	}

	*o = FqnsGet200ResponseInner(varFqnsGet200ResponseInner)

	return err
}

type NullableFqnsGet200ResponseInner struct {
	value *FqnsGet200ResponseInner
	isSet bool
}

func (v NullableFqnsGet200ResponseInner) Get() *FqnsGet200ResponseInner {
	return v.value
}

func (v *NullableFqnsGet200ResponseInner) Set(val *FqnsGet200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFqnsGet200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFqnsGet200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFqnsGet200ResponseInner(val *FqnsGet200ResponseInner) *NullableFqnsGet200ResponseInner {
	return &NullableFqnsGet200ResponseInner{value: val, isSet: true}
}

func (v NullableFqnsGet200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFqnsGet200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


